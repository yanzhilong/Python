# -- coding: utf-8 --
# 这里注释

# 换行分隔 \
if 1 > 0 and \
2 > 1:
	print '1大于0，并且2大于1'

str = """三个分号的
字符串可以不用加换行分隔"""
print str

# 一起赋值多个值
str1,str2 = ('aaa','aaa')
print str1
print str2

# 采用()[]{}时可以多行书写
str1,str2 = ('aaac',
'aaac')
print str1
print str2

# 代码组: 
if 1 > 0: # 代码组以关键字开关，:结束,还有while while class这些复合语句
	print '1 > 0'

# 缩进尽量采用四个空格，而不用制表符
if 1 > 0:
    print '1 > 0'

# 可以多个语句写在一行，用;号隔开
print 'hello world!';print 'hello world1!'

# 赋值语句，不是将值放到变量中，只是变量存储了值的引用
anInt = 12

# 增量赋值
x = 1
x = x + 1
x += 1
x -= 1
x *= 1
x %= 1
x **= 1
x <<= 1
x >>= 1
x &= 1
x ^= 1
x /= 1

# 多个对像赋值给多个变量
a,b,c = (1,2,3)

# 多元赋值 两边都是元组,但在这里()可以省略
x,y,z = 1,2,'abc'
(x,y,z) = (1,2,'abc')

# 采用多元赋值可以不需要临时变量的情况下对换变量的值
x,y = 1,2
x,y = y,x


# 在python中赋值语句不算表达式，如 y = (x = x + 1)是不成立的，java中是成立


# 私有变量尽量使用_### 表示

# 模块结构和布局

# (1) 起始行通常只有在类 Unix 环境下才使用起始行，有起始行就能够仅输入脚本名字来执行脚本，无需直接调用解释器。
# /user/bin/env python

# (2)模块文档简要介绍模块的功能及重要全局变量的含义，模块外可通过 module.__doc__ 访问这些内容。
# this is a test module

#(3)模块导入
# 导入当前模块的代码需要的所有模块；每个模块仅导入一次（当前模块被加载时）；函数内部的模块导入代码不会被执行， 除非该函数正在执行。
import sys

# (4)变量定义
#这里定义的变量为全局变量， 本模块中的所有函数都可直接使用。从好的编程风格角度说，除非必须，否则就要尽量使用局部变量代替全局变量，如果坚持这样做，你的代码就不但容易维护，而且还可以提高性能并节省内存。
bo = True

# (5)类定义语句所有的类都需要在这里定义。当模块被导入时 class 语句会被执行, 类也就会被定义。类的文档变量是 class.__doc__。
class FooClass(object):
	'Foo class'
# (6)函数定义语句
# 此处定义的函数可以通过 module.function()在外部被访问到，当模块被导入时 def 语句会被执行， 函数也就都会定义好，函数的文档变量是 function.__doc__。

# (7) 主程序
# 无论这个模块是被别的模块导入还是作为脚本直接执行，都会执行这部分代码。通常这里不会有太多功能性代码，而是根据执行的模式调用不同的函数。

def foobar(item):
	print "hello foobar"

# 对象的引用,引用计数器会增加
x = 3.14 #3.14这个对象增加了一个引用
y = x # 增加一个引用
foobar(y) # 增加一个引用
mList = ['asd',y] # 增加一个引用

# 减少引用计数器
foo = 'xyz' # xyz这个对象引用是1
bar = foo # 'xyz' 这个对象的引用是2
foo = 123 # 引用变成1了

# 减少引用的情况
# 调用的函数结束了
# 通过del foo显示销毁
# 一个别名赋值新的对象了
# 从List中移除了
# 窗口对象销毁了，del List

# del 销毁对象
bo = 'xyz'
bb = bo
del bo # bo从名字空间中删除,'xyz'这个对象引用会-1 

# 